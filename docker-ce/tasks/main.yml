---
# tasks file for docker-ce

- name: Check if distribution is supported
  ansible.builtin.set_fact:
    docker_ce_supported_dist: true
  when:
    - item.distribution == ansible_distribution and item.version == ansible_distribution_version
  loop:
    - { distribution: "Ubuntu", version: "18.04" }
    - { distribution: "Ubuntu", version: "20.04" }
    - { distribution: "Ubuntu", version: "22.04" }

- name: Fail on not supported distributions
  ansible.builtin.fail:
    msg: >-
      {{ ansible_distribution }} {{ ansible_distribution_version }} is not supported.
      Use 'docker_ce_skip_dist_check' setting to skip the check
  when: not ((docker_ce_supported_dist is defined) or (docker_ce_skip_dist_check is defined))

- name: Install needed APT packages
  ansible.builtin.apt:
    name: ["gpg-agent", "apt-transport-https", "ca-certificates"]
    update_cache: true
    cache_valid_time: "{{ '1d' | community.general.to_seconds | int }}"
  become: true

- name: Add Docker repository key
  get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/trusted.gpg.d/docker-keyring.asc
  become: true

- name: Add Docker repository
  ansible.builtin.apt_repository:
    repo: >
      deb [arch={{ deb_architecture_map[ansible_architecture] }} signed-by=/etc/apt/trusted.gpg.d/docker-keyring.asc]
      https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
    state: present
  become: true

- name: Install docker-ce packages
  ansible.builtin.apt:
    name: ["docker-ce", "docker-compose-plugin"]
    update_cache: false
  become: true

- name: Add users to 'docker' group
  ansible.builtin.user:
    name: "{{ item }}"
    groups: docker
    append: true
  become: true
  loop: "{{ docker_ce_users }}"

- name: Set Docker registry mirrors
  when: docker_ce_registry_mirrors | length > 0
  block:
    - name: Check if Docker daemon config file exists
      ansible.builtin.stat:
        path: /etc/docker/daemon.json
      register: docker_daemon_config_stat

    - name: Check current 'registry-mirrors' setting
      when: docker_daemon_config_stat.stat.exists
      block:
        - name: Read current Docker daemon config file
          ansible.builtin.slurp:
            path: /etc/docker/daemon.json
          register: docker_daemon_config_file

        - name: Get current Docker daemon config
          ansible.builtin.set_fact:
            docker_daemon_config: "{{ docker_daemon_config_file.content | b64decode | from_json }}"

        - name: Check if current 'registry-mirrors' parameter needs update
          ansible.builtin.set_fact:
            registry_mirrors_needs_update: >-
              {{ (docker_daemon_config['registry-mirrors'] != docker_ce_registry_mirrors) | bool }}
          when: "'registry-mirrors' in docker_daemon_config"

    - name: Set 'registry-mirrors' parameter in Docker daemon config
      when: "registry_mirrors_needs_update | bool"
      block:
        - name: Set 'registry-mirrors' parameter in Docker daemon config
          ansible.builtin.set_fact:
            docker_daemon_config: >
              {{ docker_daemon_config |
                combine({'registry-mirrors': docker_ce_registry_mirrors}) }}

        - name: Write Docker daemon config file file
          ansible.builtin.copy:
            content: "{{ docker_daemon_config | to_nice_json }}"
            dest: /etc/docker/daemon.json
            mode: 0644
          notify: Restart Docker service
          become: true

- name: Set Docker registry proxy
  when: docker_ce_registry_proxy
  block:
    - name: Make sure docker service override directory exists
      ansible.builtin.file:
        path: "/etc/systemd/system/docker.service.d"
        state: directory
        mode: 0755
        owner: root
        group: root
      become: true

    - name: Create override file for docker service
      ansible.builtin.copy:
        content: |
          # Generated by Ansible at {{ lookup('pipe', 'hostname -f') }}
          # Any changes made here will be overwritten
          [Service]
          Environment="HTTP_PROXY={{ docker_ce_registry_proxy }}"
          Environment="HTTPS_PROXY={{ docker_ce_registry_proxy }}"
        dest: "/etc/systemd/system/docker.service.d/http-proxy.conf"
        mode: 0644
      become: true
      # [!!] Hanlders run in order they are defined, not in order they are listed in notify
      notify:
        - Run daemon-reload for systemd
        - Restart Docker service

    - name: Get CA Certificate from registry proxy
      ansible.builtin.get_url:
        url: "{{ docker_ce_registry_proxy }}/ca.crt"
        dest: "/usr/local/share/ca-certificates/docker_registy_proxy.crt"
        mode: "0440"
      become: true
      notify: Update CA Trust
