---
# tasks file for backuppc-server

- name: Check distribution
  fail:
    msg: "Only Ubuntu 18.04 and 20.04 are supported"
  when: (ansible_distribution != "Ubuntu") or
        (ansible_distribution_version not in ["18.04", "20.04"])

- name: Wait for dpkg frontend to unlock
  include_role: name="../apt-wait-for-unlock"

- name: Install dependencies
  apt:
    name:  ["apache2", "apache2-utils", "libapache2-mod-perl2", "smbclient",
            "rrdtool", "libarchive-zip-perl", "libfile-listing-perl",
            "libxml-rss-perl", "libcgi-session-perl", "make", "gcc", "par2",
            "libacl1", "libacl1-dev",
            # this is for Ansible's htpasswd module
            "python3-passlib"]
    update_cache: yes
    # 1 hour
    cache_valid_time: 3600
  become: yes

- name: Setup server user
  include_tasks: setup_user.yml

- name: Populate service facts
  service_facts:
  become: True

- name: Check if 'backuppc' service is present
  set_fact:
    backuppc_service_is_present: "{{ True if ('backuppc.service' in ansible_facts.services) else False }}"

- name: Install BackupPC-XS
  include_tasks: install_backuppc_xs.yml

- name: Install Rsync-bpc
  include_tasks: install_rsync_bpc.yml

- block:
  - name: Debug
    debug:
      msg: End playbook
  - meta: end_play

- name: Get latest BackupPC version
  uri:
    url: https://api.github.com/repos/backuppc/backuppc/releases/latest
    return_content: yes
  register: backuppc_latest_release
  when: "backuppc_server_version == 'latest'"

- name: Update BackupPC version variable
  set_fact:
    backuppc_server_version: "{{ (backuppc_latest_release.content | from_json).tag_name }}"
  when: "backuppc_server_version == 'latest'"

- name: Try to get installed BackupPC version
  # We expect the file to contain a line like this
  # # Version 4.3.1, released 14 Jul 2019.
  shell: 'set -o pipefail; grep "# Version" /usr/local/BackupPC/bin/BackupPC | cut -d"," -f1 | cut -d " " -f3'
  # shell: echo "4.3.1"
  args:
    executable: /bin/bash
  failed_when: false
  changed_when: false
  register: backuppc_status

- name: Set BackupPC version if installed
  set_fact:
    backuppc_installed_version: "{{ backuppc_status.stdout_lines[0] }}"
  when: backuppc_status.rc == 0

- name: >-
    Check if installed BackupPC version {{ backuppc_installed_version }}
    needs upgrade to {{ backuppc_server_version }}"
  set_fact:
    install_backuppc: true
  when: "backuppc_installed_version is version(backuppc_server_version, '<')"

- name: Check if existing installation is being upgraded
  set_fact:
    backuppc_upgrade_mode: true
  when: backuppc_installed_version != "0.0"

- block:
  - name: Get temporary directory for building
    tempfile:
      state: directory
      prefix: 'backuppc-'
    register: backuppc_server_temp

  - debug:
      msg: "Temporary directory: {{ backuppc_server_temp.path }}"

  # - name: Populate service facts
  #   service_facts:
  #   become: True

  # - name: Check if 'backuppc' service is present
  #   set_fact:
  #     backuppc_service_is_present: "{{ True if ('backuppc.service' in ansible_facts.services) else False }}"

  - name: Stop 'backuppc' service
    systemd:
      name: backuppc
      state: stopped
    become: true
    when: backuppc_service_is_present

  - name: "Download BackupPC {{ backuppc_server_version }}"
    get_url:
      url: "https://github.com/backuppc/backuppc/releases/download/{{ backuppc_server_version }}/BackupPC-{{ backuppc_server_version }}.tar.gz"
      dest: "{{ backuppc_server_temp.path }}"
    when: install_backuppc

  - name: "Extract BackupPC-{{ backuppc_server_version }}.tar.gz"
    unarchive:
      src: "{{ backuppc_server_temp.path }}/BackupPC-{{ backuppc_server_version }}.tar.gz"
      dest: "{{ backuppc_server_temp.path }}"
      remote_src: yes
    when: install_backuppc

  - name: "Update configuration options for new installation"
    set_fact:
      backuppc_configure_command: >-
        ./configure.pl --batch --cgi-dir /var/www/cgi-bin/BackupPC
        --data-dir /var/lib/backuppc
        --hostname {{ backuppc_server_host_name | default(ansible_fqdn) }}
        --html-dir /var/www/html/BackupPC --html-dir-url /BackupPC
        --install-dir /usr/local/BackupPC
        --backuppc-user={{ backuppc_server_user_name }}
    when: install_backuppc and (not backuppc_upgrade_mode)

  - name: "Install and configure BackupPC"
    command: "{{ backuppc_configure_command }}"
    args:
      chdir: "{{ backuppc_server_temp.path }}/BackupPC-{{ backuppc_server_version }}"
    become: true
    when: install_backuppc

  - name: Create backuppc systemd service unit file
    copy:
      src: "{{ backuppc_server_temp.path }}/BackupPC-{{ backuppc_server_version }}/systemd/backuppc.service"
      dest: /etc/systemd/system/backuppc.service
      remote_src: true
      owner: root
      group: root
      mode: 0644
    become: true
    when: not backuppc_service_is_present

  - name: "Check if apache config exists"
    stat:
      path: /etc/apache2/conf-available/backuppc.conf
    register: backuppc_conf_info

  - name: Copy apache config from source
    copy:
      src: "{{ backuppc_server_temp.path }}/BackupPC-{{ backuppc_server_version }}/httpd/BackupPC.conf"
      dest: /etc/apache2/conf-available/backuppc.conf
      remote_src: true
      owner: root
      group: root
      # mode: 0644
    become: true
    when: not backuppc_conf_info.stat.exists

  - name: "Remove temporary directory {{ backuppc_server_temp.path | default('') }}"
    file:
      state: absent
      path: "{{ backuppc_server_temp.path }}"
    become: true

  when: install_backuppc or install_backuppc_xc or install_rsync_bpc



- name: Set group name in /etc/systemd/system/backuppc.service
  ini_file:
    path: /etc/systemd/system/backuppc.service
    section: Service
    option: Group
    value: "{{ backuppc_server_user_name }}"
    no_extra_spaces: true
  become: true

- name: Add apache allow directive
  lineinfile:
    dest: /etc/apache2/conf-available/backuppc.conf
    regex: "[Aa]llow from 127\\.0\\.0\\.1"
    line: "{{ backuppc_server_apache_allow }}"
    insertafter: "[Dd]eny from all"
  become: true
  notify: Restart Apache

- name: "Replace default apache user with {{ backuppc_server_user_name }}"
  lineinfile:
    path: /etc/apache2/envvars
    regexp: "export APACHE_RUN_USER=www-data"
    line: "export APACHE_RUN_USER={{ backuppc_server_user_name }}"
    backup: true
  become: true
  notify: Restart Apache

- name: "Replace default apache group with {{ backuppc_server_user_name }}"
  lineinfile:
    path: /etc/apache2/envvars
    regexp: "export APACHE_RUN_GROUP=www-data"
    line: "export APACHE_RUN_GROUP={{ backuppc_server_user_name }}"
  become: true
  notify: Restart Apache

- name: Set custom /var/www/html/index.html
  template:
    src: var_www_html_index.html.j2
    dest: /var/www/html/index.html
    owner: root
    group: root
    mode: 0644
    backup: true
  become: true

- name: Enable apache module cgid
  apache2_module:
    name: cgid
    state: present
  become: true
  notify: Restart Apache

- name: Enable backuppc apache config
  command: a2enconf backuppc
  args:
    creates: /etc/apache2/conf-enabled/backuppc.conf
  become: true
  notify: Restart Apache

- name: Update permissions on /var/www/cgi-bin/BackupPC/BackupPC_Admin
  file:
    path: /var/www/cgi-bin/BackupPC/BackupPC_Admin
    mode: "u-s"
  become: true

- name: Add passwords to /etc/BackupPC/BackupPC.users
  htpasswd:
    path: /etc/BackupPC/BackupPC.users
    name: "{{ item.user_name }}"
    password: "{{ item.password }}"
    owner: "{{ backuppc_server_user_name }}"
    group: "{{ backuppc_server_user_name }}"
    mode: 0640
  with_items: "{{ backuppc_server_www_users }}"
  become: true
  no_log: true

- name: Update ownership on /etc/BackupPC
  file:
    dest: /etc/BackupPC
    owner: "{{ backuppc_server_user_name }}"
    group: "{{ backuppc_server_user_name }}"
    recurse: true
  become: true

- name: Update CgiAdminUsers parameter in /etc/BackupPC/config.pl
  lineinfile:
    path: /etc/BackupPC/config.pl
    regexp: "\\$Conf\\{CgiAdminUsers\\}[ ]*=[ ]*'';"
    line: "$Conf{CgiAdminUsers} = '{{ backuppc_server_user_name }}';"
    backup: true
  become: true

- name: Start 'backuppc' service
  systemd:
    name: backuppc
    state: started
    enabled: true
    daemon_reload: true
  become: true
