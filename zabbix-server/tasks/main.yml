---
# tasks file for zabbix-server

- name: Check distribution
  fail:
    msg: "Only Ubuntu 18.04 and 16.04 are supported at the moment"
  when: not (ansible_distribution == "Ubuntu" and (ansible_distribution_release == "bionic" or ansible_distribution_release == "xenial"))

- name: Add Zabbix repository key
  apt_key:
    url: http://repo.zabbix.com/zabbix-official-repo.key
    state: present

- name: Add Zabbix repository
  apt_repository:
    repo: deb http://repo.zabbix.com/zabbix/{{ zabbix_server_version }}/ubuntu {{ ansible_distribution_release }} main
    state: present

- name: Add Zabbix repository (sources)
  apt_repository:
    repo: deb-src http://repo.zabbix.com/zabbix/{{ zabbix_server_version }}/ubuntu {{ ansible_distribution_release }} main
    state: present

- name: Update and upgrade apt packages
  become: yes
  apt:
    upgrade: "yes"
    update_cache: yes
    # Fix for warning message "Could not find aptitude. Using apt-get instead"
    force_apt_get: yes

- name: Install needed packages
  apt:
    name:  ["apache2", "libapache2-mod-php", "php", "php-pear", "php-cgi",
            "php-common", "libapache2-mod-php", "php-mbstring", "php-net-socket",
            "php-gd", "php-mysql", "php-gettext", "php-bcmath", "mariadb-server",

            "zabbix-server-mysql", "zabbix-frontend-php", "zabbix-agent",
            "zabbix-get"]
    # Fix for warning message "Could not find aptitude. Using apt-get instead"
    force_apt_get: yes
    update_cache: no



- name: Cancel
  fail:
    msg: "Debug"

- name: Install PIP Docker packages
  pip:
    name: [docker, docker-compose]

- name: Update NPM
  npm:
    name: npm
    state: latest
    global: yes

- name: Get Docker info
  docker_host_info:
    containers: yes
  register: dockerHostInfo

- name: Get Docker container list
  set_fact:
    all_docker_containers: "{{ all_docker_containers + [(item)] }}"
  with_items: "{{ dockerHostInfo.containers | map(attribute='Names') | list }}"

- name: Filter Docker container list
  set_fact:
    existing_awx_docker_containers: "{{ all_docker_containers | intersect(awx_docker_containers) }}"

- name: Check if AWX is installed
  set_fact:
    ansible_awx_installed: "{{ existing_awx_docker_containers | length != 0 }}"

- block:
  - name: Confirm upgrade
    pause:
      prompt: >
        AWX is already installed. Do you want to perform an in-place upgrade?
        [!!!] WARNING: this will destroy existing Docker containers! (yes/no)
      echo: yes
    register: ansible_awx_upgrade
    when: not (ansible_awx_force_upgrade|bool)

  - name: Set confirmation if upgrade is forced
    set_fact:
      ansible_awx_upgrade: { user_input: True}
    when: ansible_awx_force_upgrade|bool

  - name: Check user input
    fail:
      msg: "Cancelled by user"
    when: not ansible_awx_upgrade.user_input|bool

  - name: Stop AWX containers
    docker_container:
      name: "{{ item }}"
      state: stopped
    with_items: "{{ existing_awx_docker_containers }}"

  - name: Delete AWX containers
    docker_container:
      name: "{{ item }}"
      state: absent
    with_items: "{{ existing_awx_docker_containers }}"

  - name: Get Docker images info
    docker_image_info:
    register: docker_image_info

  - name: Get Docker image names
    set_fact:
      all_docker_image_names: "{{ docker_image_info.images | map(attribute='RepoTags') | list }}"

  - name: Remove all Docker images
    docker_image:
      state: absent
      name: "{{ item }}"
    with_items: "{{ all_docker_image_names }}"

  when: ansible_awx_installed

# - name: Cancel
#   fail:
#     msg: "Debug"

- name: Download https://github.com/ansible/awx/archive/{{ ansible_awx_version }}.tar.gz
  get_url:
    url: "https://github.com/ansible/awx/archive/{{ ansible_awx_version }}.tar.gz"
    dest: /tmp/awx-{{ ansible_awx_version }}.tar.gz


- name: Extract awx-{{ ansible_awx_version }}.tar.gz
  unarchive:
    src: /tmp/awx-{{ ansible_awx_version }}.tar.gz
    dest: /tmp

- name: Create 'opt/awx' directory
  file:
    path: /opt/awx
    state: directory

- name: Copy '/opt/awx/inventory' file
  copy:
    src: /tmp/awx-{{ ansible_awx_version }}/installer/inventory
    dest: /opt/awx/inventory

- name: Replace options in the inventory file
  replace:
    path: /opt/awx/inventory
    regexp: "{{ item.regexp }}"
    replace: "{{ item.replace }}"
  with_items:
    - { regexp: 'ansible_python_interpreter="/usr/bin/env python"', replace: 'ansible_python_interpreter="/usr/bin/env python3"'}
    - { regexp: 'docker_compose_dir=/tmp/awxcompose', replace: 'docker_compose_dir=/opt/awx/awxcompose'}
    - { regexp: 'postgres_data_dir=/tmp/pgdocker', replace: 'postgres_data_dir=/opt/awx/pgdocker'}

# - name: Cancel
#   fail:
#     msg: "Debug"

- name: Install AWX with the following command
  debug:
    msg: "ansible-playbook -i /opt/awx/inventory /tmp/awx-{{ ansible_awx_version }}/installer/install.yml"