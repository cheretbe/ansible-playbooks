- name: Check if mandatory variables are defined
  assert:
    that:
      - (router_lan_if_mac_addr is defined) or (router_lan_if_name is defined)
      - (router_wan_if_name is defined) or (router_wan_if_mac_addr is defined) or (router_wan_if_ip_addr is defined)

- name: Get LAN interface by MAC address
  block:
    - name: Get LAN interface by MAC address
      set_fact:
        router_lan_if: "{{ lookup('vars', 'ansible_' + item) }}"
      loop: "{{ ansible_interfaces  }}"
      # Gotchas:
      # - Ansible replaces dash with underscore in interace variable (variable
      #   corresponding to interface 'ovpn-purevpn' becomes 'ansible_ovpn_purevpn'
      #   instead of 'ansible_ovpn-purevpn')
      # - OpenVPN interfaces don't have MAC addresses
      when: "(lookup('vars', 'ansible_' + item | replace('-', '_')).macaddress | default('') )== router_lan_if_mac_addr"
  when: router_lan_if_mac_addr is defined

- name: Get LAN interface by name
  set_fact:
    router_lan_if: "{{ lookup('vars', 'ansible_' + router_lan_if_name) }}"
  when: router_lan_if_name is defined

- name: Get LAN interface network
  set_fact:
    router_lan_network: "{{ router_lan_if.ipv4.network }}/{{ router_lan_if.ipv4.netmask }}"

- block:
    - name: Get WAN interface name by MAC address
      set_fact:
        router_wan_if_name: "{{ lookup('vars', 'ansible_' + item).device }}"
      loop: "{{ ansible_interfaces  }}"
      # Gotchas:
      # - Ansible replaces dash with underscore in interace variable (variable
      #   corresponding to interface 'ovpn-purevpn' becomes 'ansible_ovpn_purevpn'
      #   instead of 'ansible_ovpn-purevpn')
      # - OpenVPN interfaces don't have MAC addresses
      when: "(lookup('vars', 'ansible_' + item | replace('-', '_')).macaddress | default('') )== router_wan_if_mac_addr"
  when: router_wan_if_mac_addr is defined

- block:
    - name: Get WAN interface name by IP address
      set_fact:
        router_wan_if_name: "{{ lookup('vars', 'ansible_' + item).device }}"
      loop: "{{ ansible_interfaces  }}"
      # Gotchas:
      # - Ansible replaces dash with underscore in interace variable (variable
      #   corresponding to interface 'ovpn-purevpn' becomes 'ansible_ovpn_purevpn'
      #   instead of 'ansible_ovpn-purevpn')
      # - OpenVPN interfaces don't have MAC addresses
      when: "(lookup('vars', 'ansible_' + item | replace('-', '_')).ipv4.address) == router_wan_if_ip_addr"
  when: router_wan_if_ip_addr is defined

- name: Make sure systemd-resolved DNS stub is disabled
  include_role: name="{{ role_path }}/../linux-dns"
  when: router_dns_forwarder|bool

- name: Set apt package names
  set_fact:
    router_apt_packages: ["iptables-persistent", "netfilter-persistent"]

- name: Add 'dnsmasq' apt package
  set_fact:
    router_apt_packages: "{{ router_apt_packages + ['dnsmasq'] }}"
  when: router_dns_forwarder|bool

- name: Add 'privoxy' apt package
  set_fact:
    router_apt_packages: "{{ router_apt_packages + ['privoxy'] }}"
  when: router_http_proxy|bool

- name: Install apt packages
  apt:
    name: "{{ router_apt_packages }}"
    update_cache: true
    cache_valid_time: "{{ '1d' | community.general.to_seconds | int }}"
    lock_timeout: "{{ '15m' | community.general.to_seconds | int }}"
  become: true

- name: Create privoxy config
  ansible.builtin.template:
    src: etc_privoxy_config.j2
    dest: "/etc/privoxy/config"
    owner: root
    group: root
    mode: '0644'
  become: true
  notify: Restart 'privoxy' service
  when: router_http_proxy|bool

- name: Enable IPv4 forwarding
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: true
    state: present
    reload: true
  become: true

- name: iptables - NAT LAN client's connections
  ansible.builtin.iptables:
    table: nat
    chain: POSTROUTING
    source: "{{ router_lan_network }}"
    out_interface: "{{ router_wan_if_name }}"
    jump: MASQUERADE
    comment: NAT LAN client's connections
  become: true
  notify: Save iptables state

- name: iptables - Drop non-VPN LAN client's connections
  ansible.builtin.iptables:
    table: filter
    chain: FORWARD
    source: "{{ router_lan_network }}"
    # Note the '!'
    out_interface: "!{{ router_wan_if_name }}"
    jump: DROP
    comment: Drop non-VPN LAN client's connections
  become: true
  notify: Save iptables state

- name: iptables - Allow SSH from non-WAN interfaces
  ansible.builtin.iptables:
    table: filter
    chain: INPUT
    protocol: tcp
    destination_port: 22
    # Note the '!'
    in_interface: "!{{ router_wan_if_name }}"
    jump: ACCEPT
    comment: Allow SSH from non-WAN interfaces
  become: true
  when: not router_allow_wan_ssh
  notify: Save iptables state

- name: iptables - Allow SSH
  ansible.builtin.iptables:
    table: filter
    chain: INPUT
    protocol: tcp
    destination_port: 22
    jump: ACCEPT
    comment: Allow SSH
  become: true
  when: router_allow_wan_ssh
  notify: Save iptables state

- name: iptables - Allow loopback connections
  ansible.builtin.iptables:
    table: filter
    chain: INPUT
    in_interface: lo
    jump: ACCEPT
    comment: Allow loopback connections
  become: true
  notify: Save iptables state

- name: iptables - Allow ICMP (INPUT)
  ansible.builtin.iptables:
    table: filter
    chain: INPUT
    protocol: icmp
    jump: ACCEPT
    comment: Allow ICMP
  become: true
  notify: Save iptables state

- name: iptables - Allow LAN connections (INPUT)
  ansible.builtin.iptables:
    table: filter
    chain: INPUT
    in_interface: "{{ router_lan_if.device }}"
    jump: ACCEPT
    comment: Allow LAN connections
  become: true
  notify: Save iptables state

- name: iptables - Allow LAN connections (FORWARD)
  ansible.builtin.iptables:
    table: filter
    chain: FORWARD
    in_interface: "{{ router_lan_if.device }}"
    jump: ACCEPT
    comment: Allow LAN connections
  become: true
  notify: Save iptables state

- name: iptables - Allow established and related connections (INPUT)
  ansible.builtin.iptables:
    table: filter
    chain: INPUT
    ctstate: ESTABLISHED,RELATED
    jump: ACCEPT
    comment: Allow established and related connections
  become: true
  notify: Save iptables state

- name: iptables - Allow established and related connections (FORWARD)
  ansible.builtin.iptables:
    table: filter
    chain: FORWARD
    ctstate: ESTABLISHED,RELATED
    jump: ACCEPT
    comment: Allow established and related connections
  become: true
  notify: Save iptables state

- name: Allow connections on custom ports
  ansible.builtin.iptables:
    table: filter
    chain: INPUT
    protocol: "{{ item.protocol }}"
    destination_port: "{{ item.port }}"
    jump: ACCEPT
    comment: "{{ item.comment }}"
  become: true
  loop: "{{ router_custom_ports }}"
  notify: Save iptables state

- name: iptables - Set the policy for the INPUT chain to DROP
  ansible.builtin.iptables:
    chain: INPUT
    policy: DROP
  become: true
  notify: Save iptables state

- name: iptables - Set the policy for the FORWARD chain to DROP
  ansible.builtin.iptables:
    chain: FORWARD
    policy: DROP
  become: true
  notify: Save iptables state
