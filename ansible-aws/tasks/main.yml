---
# tasks file for ansible-aws

- name: Check distribution
  fail:
    msg: "Only Ubuntu 18.04 is supported at the moment"
  when: not (ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04")

- name: Get Docker info
  docker_host_info:
    containers: yes
  register: dockerHostInfo

- name: Get Docker container list
  set_fact:
    all_docker_containers: "{{ all_docker_containers + [(item)] }}"
  with_items: "{{ dockerHostInfo.containers | map(attribute='Names') | list }}"

- name: Filter Docker container list
  set_fact:
    existing_aws_docker_containers: "{{ all_docker_containers | intersect(aws_docker_containers) }}"

# - name: debug 2
#   debug:
#     msg: "{{ existing_aws_docker_containers }}"

- name: Check if AWS is installed
  set_fact:
    ansible_aws_installed: "{{ existing_aws_docker_containers | length != 0 }}"

- block:
  - name: Confirm upgrade
    pause:
      prompt: "AWS is already installed. Do you want to perform an in-place upgrade?"
      echo: yes
    register: ansible_aws_upgrade

  - name: Check user input
    fail:
      msg: "Cancelled by user"
    when: not ansible_aws_upgrade.user_input|bool

  - name: Delete containers
    debug:
      msg: there you go

  when: ansible_aws_installed

- name: Cancel
  fail:
    msg: "Debug"

# - name: result
#   debug:
#     var: ansible_aws_upgrade.user_input|bool

# - name: Make sure that both images pacur/centos-7 and sinatra exist locally
#   assert:
#     that:
#       - result.images | length == 0

- name: Download https://github.com/ansible/awx/archive/{{ ansible_aws_version }}.tar.gz
  get_url:
    url: "https://github.com/ansible/awx/archive/{{ ansible_aws_version }}.tar.gz"
    dest: /tmp/awx-{{ ansible_aws_version }}.tar.gz


- name: Extract awx-{{ ansible_aws_version }}.tar.gz
  unarchive:
    src: /tmp/awx-{{ ansible_aws_version }}.tar.gz
    dest: /tmp

# - name: Run installation task
#   include:
#     file: /tmp/awx-{{ ansible_aws_version }}/installer/install.yml
#   apply:
#     tags:
#       - aaa

# - name: test me
#   include: /tmp/awx-{{ ansible_aws_version }}/installer/install.yml

# - name: Run installer
#   command: ansible-playbook -i /opt/awx/inventory /tmp/awx-{{ ansible_aws_version }}/installer/install.yml

# - name: dummy
#   set_fact:
#     dummy: 'Start build with "ansible-playbook --become awx/installer/install.yml"'

# - name: aaa
#   debug:
#     var: dummy

# https://docs.ansible.com/ansible/latest/user_guide/playbooks_prompts.html
# https://docs.ansible.com/ansible/latest/modules/pause_module.html

- name: Hint build command
  debug:
    msg: 'Start build with "ansible-playbook --become awx/installer/install.yml"'

- name: Hint build command 1
  debug:
    msg: "Start build with 'ansible-playbook --become awx/installer/install.yml'"

# Print as pause statement
# Not suitable for different commands per host, because pause task skips host loop (forced run_once:yes)
# - name: Print command as pause statment
#   pause:
#     prompt: 'Execute this and press enter: run_me.sh "with this argument"'