---
# tasks file for ansible-aws

- name: Check distribution
  fail:
    msg: "Only Ubuntu 18.04 is supported at the moment"
  when: not (ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04")

- name: Get Docker info
  docker_host_info:
    containers: yes
  register: dockerHostInfo

- name: Get Docker container list
  set_fact:
    all_docker_containers: "{{ all_docker_containers + [(item)] }}"
  with_items: "{{ dockerHostInfo.containers | map(attribute='Names') | list }}"

- name: Filter Docker container list
  set_fact:
    existing_aws_docker_containers: "{{ all_docker_containers | intersect(aws_docker_containers) }}"

- name: Check if AWS is installed
  set_fact:
    ansible_aws_installed: "{{ existing_aws_docker_containers | length != 0 }}"

- block:
  - name: Confirm upgrade
    pause:
      prompt: "AWS is already installed. Do you want to perform an in-place upgrade?"
      echo: yes
    register: ansible_aws_upgrade

  - name: Check user input
    fail:
      msg: "Cancelled by user"
    when: not ansible_aws_upgrade.user_input|bool

  - name: Stop AWS containers
    docker_container:
      name: "{{ item }}"
      state: stopped
    with_items: "{{ existing_aws_docker_containers }}"

  - name: Delete AWS containers
    docker_container:
      name: "{{ item }}"
      state: absent
    with_items: "{{ existing_aws_docker_containers }}"

  - name: Get Docker images info
    docker_image_info:
    register: docker_image_info

  - name: Get Docker image names
    set_fact:
      all_docker_image_names: "{{ docker_image_info.images | map(attribute='RepoTags') | list }}"

  - name: Remove all Docker images
    docker_image:
      state: absent
      name: "{{ item }}"
    with_items: "{{ all_docker_image_names }}"

  when: ansible_aws_installed

# - name: Cancel
#   fail:
#     msg: "Debug"

- name: Download https://github.com/ansible/awx/archive/{{ ansible_aws_version }}.tar.gz
  get_url:
    url: "https://github.com/ansible/awx/archive/{{ ansible_aws_version }}.tar.gz"
    dest: /tmp/awx-{{ ansible_aws_version }}.tar.gz


- name: Extract awx-{{ ansible_aws_version }}.tar.gz
  unarchive:
    src: /tmp/awx-{{ ansible_aws_version }}.tar.gz
    dest: /tmp

- name: Create 'opt/awx' directory
  file:
    path: /opt/awx
    state: directory

- name: Copy '/opt/awx/inventory' file
  copy:
    src: /tmp/awx-{{ ansible_aws_version }}/installer/inventory
    dest: /opt/awx/inventory

- name: Replace options in the inventory file
  replace:
    path: /opt/awx/inventory
    regexp: "{{ item.regexp }}"
    replace: "{{ item.replace }}"
  with_items:
    - { regexp: 'ansible_python_interpreter="/usr/bin/env python"', replace: 'ansible_python_interpreter="/usr/bin/env python3"'}
    - { regexp: 'docker_compose_dir=/tmp/awxcompose', replace: 'docker_compose_dir=/opt/awx/awxcompose'}
    - { regexp: 'postgres_data_dir=/tmp/pgdocker', replace: 'postgres_data_dir=/opt/awx/pgdocker'}

# - name: Cancel
#   fail:
#     msg: "Debug"

- name: Hint build command
  debug:
    msg: "ansible-playbook -i /opt/awx/inventory /tmp/awx-{{ ansible_aws_version }}/installer/install.yml"